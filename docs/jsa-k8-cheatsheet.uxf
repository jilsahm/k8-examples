<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>11</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1628</x>
      <y>979</y>
      <w>451</w>
      <h>451</h>
    </coordinates>
    <panel_attributes>
Deployment

-
A Deployment is one of the Kubernetes objects 
that is used to manage Pods via ReplicaSets in 
a declarative way. It provides updates control 
as well as rollback functionalities. This means 
you can update or downgrade an application to 
the desired version without experiencing a user 
blackout as well as roll back to the previous 
version in case the new version is unstable or 
filled with bugs.
-
apiVersion: apps/v1
kind: Pod
metadata:
  name: &lt;deployname&gt;
  labels:
    &lt;key&gt;: &lt;value&gt;
spec:
  replicas: &lt;n&gt;
  selector:
    matchLabels: # the labels from the Pods
      &lt;key&gt;: &lt;value&gt;
  template:
    # include metadata and spec
    # from Pod definition here
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>440</x>
      <y>1034</y>
      <w>462</w>
      <h>572</h>
    </coordinates>
    <panel_attributes>
Pod

-
The smalles object for running containers in K8.
There is 1 to n containers running in a Pod.
Most of the time one Pod contains one container.
-
apiVersion: v1
kind: Pod
metadata:
  name: &lt;podname&gt;
  labels:
    &lt;key&gt;: &lt;value&gt;
spec:
  serviceAccount: &lt;serviceaccountname&gt;
  containers:
  - name: &lt;containername&gt;
    image: &lt;image&gt;
    ports:
    - containerPort: &lt;port&gt;
    envFrom:
    - configMapRef:
        name: &lt;configmapname&gt;
    - secretRef:
        name: &lt;secretname&gt;
    resources:
      requests: # minimum resources 
        memory: "&lt;ram&gt;"
        cpu: "&lt;cpu&gt;"
      limits: # maximum resources
        memory: "&lt;ram&gt;"
        cpu: "&lt;cpu&gt;"
    nodeSelector:
      &lt;key&gt;: &lt;value&gt; # labels of specific nodes</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1045</x>
      <y>979</y>
      <w>451</w>
      <h>451</h>
    </coordinates>
    <panel_attributes>
ReplicaSet

-
A ReplicaSet is a process that runs multiple 
instances of a Pod and keeps the specified 
number of Pods constant. Its purpose is to 
maintain the specified number of Pod instances 
running in a cluster at any given time to 
prevent users from losing access to their 
application when a Pod fails or is inaccessible.
-
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: &lt;replicasetname&gt;
spec:
  replicas: &lt;n&gt;
  selector:
    matchesLabels: # the labels from the Pods
      &lt;key&gt;: &lt;value&gt;
    template:
      # include metadata and spec 
      # from Pod definition here</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1485</x>
      <y>1188</y>
      <w>165</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
creates</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>891</x>
      <y>1177</y>
      <w>176</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
manages</panel_attributes>
    <additional_attributes>10.0;20.0;140.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>187</x>
      <y>1771</y>
      <w>506</w>
      <h>495</h>
    </coordinates>
    <panel_attributes>
Service

-
Ports and IPs from the view of the service:
- NodePort = The external Port on the Node the 
service is reachable on
- Port = The internal Port the service is
reachable from in the Node
- TargetPort = The Port of the Pod the service
is delegating the trafic to
- ClusterIP = The internal IP asigned to the
service 
-
FQDN Structure:
  &lt;servicename&gt;.&lt;namespace&gt;.svc.cluster.local
Pods in the sample namespace only need to use
the &lt;servicename&gt; in order to connect to it.
-
apiVersion: v1
kind: Service
metadata:
  name: &lt;servicename&gt;
spec:
  type: &lt;NodePort|ClusterIP|Loadbalancer&gt;
  ports:
  - targetPort: &lt;port of the pod&gt;
    port: &lt;port for the service&gt;
    nodePort: &lt;external port&gt; # only for type Nodeport
  selector:
    &lt;key&gt;: &lt;value&gt;
    # the labels from the target Pod</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>704</x>
      <y>539</y>
      <w>451</w>
      <h>253</h>
    </coordinates>
    <panel_attributes>
Secret

-

-
In case a secret is mounted as a volumne each
value will be written in a file named as key
under the mounted folder.
-
apiVerions: v1
kind: Secret
metadata:
  name: &lt;secretname&gt;
data:
  &lt;key1&gt;: &lt;base64-value1&gt;
  &lt;key2&gt;: &lt;base64-value2&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1430</x>
      <y>539</y>
      <w>451</w>
      <h>253</h>
    </coordinates>
    <panel_attributes>
ServiceAccount

-
Used by machines in order to get access to
specific cluster operations.
-
apiVersion: v1
kind: ServiceAccount
metadata:
  name: &lt;serviceaccountname&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>572</y>
      <w>451</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>
ConfigMap

-
Outsourcing and sharing for plaintest key=value 
properties used by other objects.
-
apiVersion: v1
kind: ConfigMap
metadata:
  name: &lt;configmapname&gt;
data:
  &lt;key1&gt;: &lt;value1&gt;
  &lt;key2&gt;: &lt;value2&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2189</x>
      <y>814</y>
      <w>451</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>
Namespace

-
Kubernetes supports multiple virtual clusters 
backed by the same physical cluster. These 
virtual clusters are called namespaces.
Namespaces are intended for use in environments 
with many users spread across multiple teams, 
or projects.
-
apiVersion: v1
kind: Namespace
metadata:
  name: &lt;namespacename&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2409</x>
      <y>726</y>
      <w>242</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=-
can be referenced by 
any other object in its
metadata block
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2189</x>
      <y>1166</y>
      <w>451</w>
      <h>506</h>
    </coordinates>
    <panel_attributes>
ResourceQuota

-
By default, containers run with unbounded 
compute resources on a Kubernetes cluster. 
With resource quotas, cluster administrators 
can restrict resource consumption and creation 
on a namespace basis. Within a namespace, a 
Pod or Container can consume as much CPU and 
memory as defined by the namespace's resource 
quota.
-
apiVersion: v1
kind: ResourceQuota
metadata:
  name: &lt;quotaname&gt;
  namespace: &lt;namespace to be limited&gt;
spec:
  hard:
    pods: &lt;n&gt;
    requests:
      cpu: "&lt;cpu&gt;"
      memory "&lt;ram&gt;"
    limits:
      cpu: "&lt;cpu&gt;"
      memory "&lt;ram&gt;" 
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2409</x>
      <y>1034</y>
      <w>88</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
limits</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>407</x>
      <y>781</y>
      <w>297</w>
      <h>143</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>250.0;110.0;10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>671</x>
      <y>781</y>
      <w>297</w>
      <h>143</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>250.0;10.0;250.0;110.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>891</y>
      <w>132</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
injected in</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1144</x>
      <y>682</y>
      <w>308</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
creates to 
store token</panel_attributes>
    <additional_attributes>10.0;20.0;260.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1166</x>
      <y>0</y>
      <w>451</w>
      <h>297</h>
    </coordinates>
    <panel_attributes>
RoleBinding

-

-
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: &lt;bindingname&gt;
  namespace: &lt;namespace&gt;
subjects:
- kind: ServiceAccount
  name: &lt;serviceaccountname&gt;
  namespace: default
roleRef:
  kind: &lt;Role|ClusterRole&gt;
  name: &lt;rolename|clusterrolename&gt;
  apiGroup: rbac.authorization.k8s.io</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1683</x>
      <y>0</y>
      <w>451</w>
      <h>297</h>
    </coordinates>
    <panel_attributes>
Role

-

-
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: &lt;rolename&gt;
  namespace: &lt;namespace&gt;
rules:
- apiGroups:
  - ''
  resources: # resouces the role has access to
  - pods
  verbs: # verbs the role has access to
  - get
  - watch
  - list</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1639</x>
      <y>396</y>
      <w>286</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
grant RBAC permissions to
(Role Based Access Control)</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1639</x>
      <y>286</y>
      <w>297</w>
      <h>143</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>250.0;10.0;250.0;110.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1375</x>
      <y>286</y>
      <w>297</w>
      <h>143</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>250.0;110.0;10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2695</x>
      <y>1166</y>
      <w>451</w>
      <h>319</h>
    </coordinates>
    <panel_attributes>
LimitRange

-
A LimitRange is a policy to constrain resource 
allocations (to Pods or Containers) in a 
namespace.
-
apiVersion: v1
kind: LimitRange
metadata:
  name: &lt;limitrangename&gt;
spec:
  limits:
  - default:
      &lt;memory|cpu&gt;: "&lt;value&gt;"
    defaultRequest:
      &lt;memory|cpu&gt;: "&lt;value&gt;"
    type: Container
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2475</x>
      <y>1034</y>
      <w>473</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
limits</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0;410.0;90.0;410.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1045</x>
      <y>1485</y>
      <w>451</w>
      <h>506</h>
    </coordinates>
    <panel_attributes>
Job

-
A Job creates one or more Pods and will continue 
to retry execution of the Pods until a specified 
number of them successfully terminate. As pods 
successfully complete, the Job tracks the 
successful completions. When a specified number 
of successful completions is reached, the task 
(ie, Job) is complete. Deleting a Job will clean 
up the Pods it created. Suspending a Job will 
delete its active Pods until the Job is resumed 
again.
-
apiVersion: batch/v1
kind: Job
metadata:
  name: &lt;jobname&gt;
spec:
  completions: &lt;n&gt;
  parallelism: &lt;n&gt;
  template:
    spec:
      containers:
      - name: math
        image: ubuntu
        command: ['expr']
        args:
        - '3'
        - '+'
        - '5'
      restartPolicy: &lt;Never|OnFailure&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1628</x>
      <y>1628</y>
      <w>451</w>
      <h>407</h>
    </coordinates>
    <panel_attributes>
CronJob

-
A CronJob creates Jobs on a repeating schedule.
One CronJob object is like one line of a crontab 
(cron table) file. It runs a job periodically on 
a given schedule, written in Cron format.
-
Cron Syntax
┌───────────── Minute (0 - 59)
│ ┌───────────── Second (0 - 23)
│ │ ┌───────────── Day of Month (1 - 31)
│ │ │ ┌───────────── Month (1 - 12)
│ │ │ │ ┌───────────── Day of Week (0 - 6)
│ │ │ │ │
* * * * *  
-
apiVersion: batch/v1
kind: CronJob
metadata:
  name: &lt;jobname&gt;
spec:
  scheduled: &lt;cron-string&gt;
  jobTemplate:
    # include the spec part from a Job
    # definition here
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1485</x>
      <y>1771</y>
      <w>165</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
creates</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>891</x>
      <y>1485</y>
      <w>176</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
runs</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;280.0;140.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>506</x>
      <y>1595</y>
      <w>176</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
makes accessable</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
</diagram>
